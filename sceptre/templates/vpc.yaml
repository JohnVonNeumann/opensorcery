---
Parameters:
  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-southeast-2a
  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-southeast-2b
  AvailabilityZone3:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-southeast-2c
  CidrBlockVPC:
    Type: String
    AllowedPattern:
      "(\\d{1,3})\\.(\\d{1,3})\\.
      (\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.0.0/16
  CidrBlockPublicSubnet1:
    Type: String
    AllowedPattern:
      "(\\d{1,3})\\.(\\d{1,3})\\.
      (\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.1.0/24
  CidrBlockPublicSubnet2:
    Type: String
    AllowedPattern:
      "(\\d{1,3})\\.(\\d{1,3})\\.
      (\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.3.0/24
  CidrBlockPrivateSubnet1:
    Type: String
    AllowedPattern:
      "(\\d{1,3})\\.(\\d{1,3})\\.
      (\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.2.0/24
  CidrBlockPrivateSubnet2:
    Type: String
    AllowedPattern:
      "(\\d{1,3})\\.(\\d{1,3})\\.
      (\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.4.0/24

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock:
        !Ref CidrBlockVPC
      EnableDnsHostnames: true
      EnableDnsSupport: true

  #
  # Public Subnets
  #

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        !Ref VPC
      CidrBlock:
        !Ref CidrBlockPublicSubnet1
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        !Ref AvailabilityZone1

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        !Ref VPC
      CidrBlock:
        !Ref CidrBlockPublicSubnet2
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        !Ref AvailabilityZone2

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        !Ref VPC
      InternetGatewayId:
        !Ref InternetGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        !Ref VPC

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        !Ref InternetGateway

  PublicSubnetAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        !Ref VPC

  # Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        !Ref PublicSubnet1
      RouteTableId:
        !Ref PublicRouteTable

  PublicSubnet1SubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        !Ref PublicSubnet1
      NetworkAclId:
        !Ref PublicSubnetAcl

  # Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        !Ref PublicSubnet2
      RouteTableId:
        !Ref PublicRouteTable

  PublicSubnet2SubnetNetworkAclAssociation:
    # For the time being, NACL entries haven't been created, mainly because it
    # would add quite a bit of time onto the process and I didn't want the PR
    # to be huge so I'll take a more iterative approach. But entries will have
    # to be made as Resources are added to the network. ie: port 5432 nacl
    # entry for the RDS that will eventually come
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        !Ref PublicSubnet2
      NetworkAclId:
        !Ref PublicSubnetAcl

  #
  # Private Subnets
  #

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        !Ref VPC
      CidrBlock:
        !Ref CidrBlockPrivateSubnet1
      AvailabilityZone:
        !Ref AvailabilityZone3

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        !Ref VPC
      CidrBlock:
        !Ref CidrBlockPrivateSubnet2
      AvailabilityZone:
        !Ref AvailabilityZone1

  PrivateRouteTable:
    # Route tables automaticallly add a local conn to 10.0.0.0/16 so we can
    # leave them without additional routes for the time being
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        !Ref VPC

  PrivateSubnetAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        !Ref VPC

  # Private Subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        !Ref PrivateSubnet1
      RouteTableId:
        !Ref PrivateRouteTable

  PrivateSubnet1SubnetNetworkAclAssociation:
    # Same applies for nacl entries here as it did for the docs left above.
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        !Ref PrivateSubnet1
      NetworkAclId:
        !Ref PrivateSubnetAcl

  # Private Subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        !Ref PrivateSubnet2
      RouteTableId:
        !Ref PrivateRouteTable

  PrivateSubnet2SubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        !Ref PrivateSubnet2
      NetworkAclId:
        !Ref PrivateSubnetAcl

Outputs:
  VpcId:
    Value:
      !Ref VPC
  PublicSubnet1Id:
    Value:
      !Ref PublicSubnet1
  PublicSubnet2Id:
    Value:
      !Ref PublicSubnet2
